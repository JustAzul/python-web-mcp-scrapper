version: '3.8'

services:
  webscraper:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Pass the default port during build, allows Dockerfile ARG to work
        DEFAULT_PORT: ${PORT:-9001}
    container_name: webscraper
    ports:
      # Map host port to container port using the PORT variable
      - "${PORT:-9001}:${PORT:-9001}"
    # Command is handled by Dockerfile CMD now, using the ENV PORT
    # command: uvicorn src.api:app --host 0.0.0.0 --port ${PORT:-9001}
    environment:
      # Ensure the container runs on the specified port
      - PORT=${PORT:-9001}
      # Pass other configuration via environment variables if needed
      # Example:
      # - SCRAPER_TIMEOUT_SECONDS=45
      - PYTHONUNBUFFERED=1 # Ensure logs are shown immediately
    # Increase shared memory size - important for Chrome/Playwright stability
    shm_size: '2gb'
    volumes:
      - ./src:/app/src # Mount local src for development (optional)

  mcp_server:
    build:
      context: .
      dockerfile: Dockerfile
      args: # Pass build arg here too if mcp_server ever needs the port internally
        DEFAULT_PORT: ${PORT:-9001}
    container_name: mcp_server
    # No ports needed for MCP server unless explicitly connecting over network
    environment:
      - PYTHONUNBUFFERED=1
      # If mcp_server needed the API port, it would be passed here:
      # - PORT=${PORT:-9001}
    shm_size: '2gb' # Playwright needs shared memory
    volumes:
      - ./src:/app/src
    command: python src/mcp_server.py # Command to run the MCP server
    # Potentially add depends_on if it needs another service, but likely runs independently

  test_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webscraper_api_tester
    depends_on:
      - webscraper # Wait for the webscraper service to be available
    environment:
      # Update URL to use the PORT variable
      - WEBSCRAPER_SERVICE_URL=http://webscraper:${PORT:-9001}
      - PYTEST_ADDOPTS=--disable-warnings # Optional: Suppress pytest warnings
      - PYTHONUNBUFFERED=1
    # Mount test code and potentially shared source code if needed
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src # Make source code available if tests import from it directly
    # Increase shared memory size for potential Playwright use within tests
    shm_size: '2gb'
    # The command to run the API tests
    command: >
      sh -c "
        echo 'Waiting for webscraper service to start...';
        # Adjust sleep if needed based on startup time with new port
        sleep 5;
        echo 'Running API tests...';
        pytest -v -rs tests/test_api.py
      "

  test_mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webscraper_mcp_tester
    # Removed depends_on as stdio_client starts the server process
    # depends_on:
    #   - mcp_server # Wait for the MCP server service
    environment:
      - PYTEST_ADDOPTS=--disable-warnings # Optional: Suppress pytest warnings
      - PYTHONUNBUFFERED=1 # Added for consistency
      # Added environment variables for MCP server connection
      - MCP_SERVER_HOST=mcp_server
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-0} # Use 0 (stdio) by default, but allow override
    # Mount test code and potentially shared source code if needed
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src # Make source code available if tests import from it directly
    # Increase shared memory size for potential Playwright use within tests
    shm_size: '2gb'
    # The command to run the MCP tests
    command: >
      sh -c "
        echo 'Waiting for MCP server service to start...';
        sleep 8; # MCP server might need a bit more time to initialize
        echo 'Running MCP tests...';
        pytest -v -rs tests/test_mcp.py
      "

  # Keep the original test service for compatibility but make it run all tests
  test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webscraper_tester
    depends_on:
      - webscraper
      # Removed dependency on mcp_server since we're using stdio approach
    environment:
      # Explicitly set the URL and Port for the API service
      - WEBSCRAPER_SERVICE_URL=http://webscraper:${PORT:-9001}
      # MCP server address doesn't depend on the API port
      - MCP_SERVER_ADDRESS=mcp://mcp_server # Kept for reference, though stdio is used now
      # Added environment variables for MCP server connection
      - MCP_SERVER_HOST=mcp_server
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-0} # Use 0 (stdio) by default, but allow override
      - PYTEST_ADDOPTS=--disable-warnings
      - PYTHONUNBUFFERED=1
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src
    shm_size: '2gb'
    command: >
      sh -c "
        echo 'Waiting for webscraper service to start...';
        sleep 5; # Only wait for webscraper, not mcp_server
        echo 'Running all tests...';
        pytest -v -rs tests/
      "

  # New service to run tests for specific domains
  test_domains:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webscraper_domain_tester
    depends_on:
      - webscraper
    environment:
      - WEBSCRAPER_SERVICE_URL=http://webscraper:${PORT:-9001}
      - MCP_SERVER_HOST=mcp_server
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-0}
      - PYTEST_ADDOPTS=--disable-warnings
      - PYTHONUNBUFFERED=1
      - TEST_DOMAINS=${TEST_DOMAINS:-dev.to,dmnews.com} # Default to test problematic domains
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src
    shm_size: '2gb'
    command: >
      sh -c "
        echo 'Waiting for webscraper service to start...';
        sleep 5;
        echo 'Running tests for specified domains: ${TEST_DOMAINS}';
        cd tests && python -m run_domain_tests ${TEST_DOMAINS}
      "